{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onChangeHandler","event","target","files","setState","selectedFile","console","log","fileData","state","compressed","size","href","id","className","onClick","save","onFileCompress","a","imageFile","Blob","options","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","compressedFile","class","dlbtn","document","getElementById","file","type","URL","createObjectURL","download","bind","accept","onChange","this","name","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gUA0IeA,E,kDApIX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,gBAAkB,SAAAC,GACVA,EAAMC,OAAOC,MAAM,KACnB,EAAKC,SAAS,CACVC,aAAcJ,EAAMC,OAAOC,MAAM,KAErCG,QAAQC,IAAI,mBAdD,EAkBnBC,SAAW,WACP,OAAI,EAAKC,MAAMJ,cAAgB,EAAKI,MAAMC,WAElC,6BACI,6CACA,yCAAe,EAAKD,MAAMJ,aAAaM,KAAvC,UACA,uBAAGC,KAAK,GAAGC,GAAG,SAAQ,4BAAQC,UAAU,SAASC,QAAS,EAAKC,MAAzC,uCAIzB,EAAKP,MAAMJ,aAGZ,6BACA,2CAAiB,EAAKI,MAAMJ,aAAaM,KAAzC,WAMA,yBAAKG,UAAU,gBACX,2DACI,4BACI,4BAAI,uBAAGF,KAAK,IAAR,kCACJ,4BAAI,uBAAGA,KAAK,IAAR,qCACJ,4BAAI,uBAAGA,KAAK,IAAR,kCACJ,4BAAI,uBAAGA,KAAK,IAAR,mCA5CT,EAoDnBK,eApDmB,sBAoDF,gCAAAC,EAAA,yDACbZ,QAAQC,IAAI,WACR,EAAKE,MAAMJ,eAAwC,IAAxB,EAAKI,MAAMC,WAF7B,wBAGTJ,QAAQC,IAAI,oBACRY,EAAY,EAAKV,MAAMJ,aAC3BC,QAAQC,IAAIY,GACZb,QAAQC,IAAI,+BAAgCY,aAAqBC,MACjEd,QAAQC,IAAR,4BAAiCY,EAAUR,KAAO,KAAO,KAAzD,QAGIU,EAAU,CACVC,UAAW,EACXC,iBAAkB,KAClBC,cAAc,GAbT,UAeoBC,YAAiBN,EAAWE,GAfhD,QAeHK,EAfG,OAgBT,EAAKtB,SAAS,CACVC,aAAcqB,EACdhB,YAAY,IAEhBJ,QAAQC,IAAImB,GACZpB,QAAQC,IAAI,iCAAkCmB,aAA0BN,MACxEd,QAAQC,IAAR,8BAAmCmB,EAAef,KAAO,KAAO,KAAhE,QAtBS,+BAyBTL,QAAQC,IAAI,wBAzBH,kBA2BL,yBAAKoB,MAAM,gBACH,4BACI,2DACA,gEACA,6DACA,0DACA,wEAjCP,4CApDE,EA4FnBX,KAAK,WACD,GAAI,EAAKP,MAAMJ,aAAc,CACzB,IACIuB,EAAQC,SAASC,eAAe,SAChCC,EAAO,IAAIX,KAAK,CAAC,EAAKX,MAAMJ,cAAe,CAAC2B,KAAK,eACrDJ,EAAMhB,KAAOqB,IAAIC,gBAAgBH,GACjCH,EAAMO,SAJK,WAKX,EAAK/B,SAAS,CACVC,aAAc,KACdK,YAAY,MAnGpB,EAAKO,eAAiB,EAAKA,eAAemB,KAApB,gBACtB,EAAK3B,MAAQ,CACbJ,aAAc,KACdK,YAAY,GALG,E,qDA0GT,IAAD,OACL,OAEI,yBAAKI,UAAW,OACP,gCACD,iDAEJ,yBAAKa,MAAM,WACP,yBAAKA,MAAM,eACP,2BAAOb,UAAU,cAAckB,KAAK,OAAQK,OAAO,UAAUC,SAAUC,KAAKvC,gBAAiBa,GAAG,UAAU2B,KAAK,YAAY7B,KAAK,cAChI,uBAAGgB,MAAM,qBAGjB,yBAAKA,MAAM,WACP,4BAAQb,UAAU,SAASC,QAAS,kBAAM,EAAKE,mBAA/C,aAEHsB,KAAK/B,gB,GA3HHiC,IAAMC,WCOLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASC,eAAe,SDwHpB,kBAAmBqB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.5f38d036.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport imageCompression from 'browser-image-compression';\n\n\nclass App  extends React.Component{\n    constructor(props) {\n        super(props);\n        this.onFileCompress = this.onFileCompress.bind(this);\n        this.state = {\n        selectedFile: null,\n        compressed: false,\n        }\n    }\n\n    onChangeHandler = event => {\n        if (event.target.files[0]) { \n            this.setState({\n                selectedFile: event.target.files[0],\n            });\n            console.log('file selected');\n        }\n    }\n\n    fileData = () => { \n        if (this.state.selectedFile && this.state.compressed) { \n            return ( \n                <div> \n                    <h2>File Details:</h2>\n                    <p> File size:{this.state.selectedFile.size} bytes</p>\n                    <a href=\"\" id=\"dlbtn\"><button className=\"button\" onClick={this.save}>click here to download your Image</button></a>\n                </div> \n            ); \n        }\n        else if (this.state.selectedFile)\n        {\n            return ( \n                <div> \n                <h2> File size :{this.state.selectedFile.size} bytes</h2>\n                </div> \n            );\n        }\n        else { \n            return ( \n                <div className=\"rounded-list\">\n                    <h1>STEPS TO COMPRESS AN IMAGE:</h1> \n                        <ol>\n                            <li><a href=\"\">Click on the \"Up-head arrow\".</a></li>\n                            <li><a href=\"\" >Select an image from the device.</a></li>\n                            <li><a href=\"\" >Click on the compress button.</a></li>\n                            <li><a href=\"\">click on \"Download\" button.</a></li>\n                            \n                        </ol>\n                </div> \n            ); \n        } \n    }\n    \n    onFileCompress = async() => {\n        console.log('xxxxxx');\n        if (this.state.selectedFile && this.state.compressed===false) {\n            console.log('file compressing');\n            var imageFile = this.state.selectedFile;\n            console.log(imageFile);\n            console.log('originalFile instanceof Blob', imageFile instanceof Blob); // true\n            console.log(`originalFile size ${imageFile.size / 1024 / 1024} MB`);\n            \n    \n            var options = {\n                maxSizeMB: 1,\n                maxWidthOrHeight: 1920,\n                useWebWorker: true\n            }\n            const compressedFile = await imageCompression(imageFile, options);\n            this.setState({\n                selectedFile: compressedFile,\n                compressed: true,\n            });\n            console.log(compressedFile);\n            console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\n            console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`); // smaller than maxSizeMB\n        }    \n        else {\n            console.log('selectedfile is null');\n            return ( \n                <div class=\"rounded-list\"> \n                        <ol>\n                            <li>Click on the \"Choose file\".</li>\n                            <li>Select an image from the device.</li>\n                            <li>Click on the compress button.</li>\n                            <li>click on \"Download\" button</li>\n                            <li>You can now view the compressed image</li>\n                        </ol>\n                </div> \n            );\n        }\n    }\n    \n    save=() => {\n        if (this.state.selectedFile) {\n            var name = \"new file\";\n            var dlbtn = document.getElementById(\"dlbtn\");\n            var file = new Blob([this.state.selectedFile], {type:'image/jpeg'});\n            dlbtn.href = URL.createObjectURL(file);\n            dlbtn.download = name;\n            this.setState({\n                selectedFile: null,\n                compressed: false,\n            });\n        }\n    }\n    \n    render() {\n        return (\n            \n            <div className= \"app\">\n                     <header>\n                    <h3>IMAGE COMPRESSOR</h3>\n                    </header>\n                <div class=\"wrapper\">\n                    <div class=\"file-upload\">\n                        <input className=\"input-field\" type=\"file\"  accept=\"image/*\" onChange={this.onChangeHandler} id=\"my file\" name=\"file name\" size=\"file size\"></input>\n                        <i class=\"fa fa-arrow-up\"></i>\n                    </div>\n                </div>\n                <div class=\"wrapper\">\n                    <button className=\"button\" onClick={() => this.onFileCompress()}>Compress</button>\n                </div>\n                {this.fileData()}\n            </div>\n        );\n    }\n    \n\n}\n \n  \n\nexport default App;\n\n\n// import React,{Component} from 'react';\n//  import './App.css';\n//  import imageCompression from 'browser-image-compression';\n\n\n//  class App  extends React.Component{\n//      constructor(props) {\n//          super(props);\n//          this.state = {\n//          selectedFile: null\n//          }\n//      }\n\n//      onChangeHandler = event => {\n//          this.setState({\n//              selectedFile: event.target.files[0],\n//          });\n//          console.log('file selected');\n//      }\n\n//      fileData = () => { \n//          if (this.state.selectedFile) { \n//              return ( \n//                  <div> \n//                      <h2>Selected File Details:</h2> \n//                     <p>File Name: {this.state.selectedFile.name}</p> \n//                      <p>File Type: {this.state.selectedFile.type}</p> \n//                      <p> \n//                          Last Modified:{\" \"} \n//                          {this.state.selectedFile.lastModifiedDate.toDateString()} \n//                      </p>\n//                      <p> Original File size:{this.state.selectedFile.size} bytes</p>\n//                  </div> \n//              ); \n//          } \n//          else { \n//              return ( \n//                  <div> \n//                      <br />                     \n//                     <p>Click on the \"Choose file\" button to compress a file</p>\n//                 </div> \n//              ); \n//          } \n//      }\n\n//      onFileCompress = () => {\n//          if (this.state.selectedFile) {\n//            console.log('file compressing');\n//                var imageFile = this.state.selectedFile;\n//              console.log('originalFile instanceof Blob', imageFile instanceof Blob); // true\n//              console.log(`originalFile size ${imageFile.size / 1024 / 1024} MB`);\n            \n//              var options = {\n//                  maxSizeMB: 1,\n//                 maxWidthOrHeight: 1920,\n//                  useWebWorker: true\n//              }\n//              const compressedFile =  await imageCompression(imageFile, options);\n//             console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\n//             console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`); // smaller than maxSizeMB\n//         }\n//         else {\n//             console.log('selectedfile is null');\n//             return ( \n//                 <div> \n//                     <br /> \n//                     <p>Click on the \"Choose file\" button to compress a file</p>\n//                 </div> \n//             );\n//         }\n//     }\n\n//     render() {\n//         return (\n//             <div>\n//                 <div>\n//                     <form>\n//                         <input type=\"file\"  accept=\"image/*\" onChange={this.onChangeHandler} id=\"my file\" name=\"file name\" size=\"file size\"></input>\n//                         <button onClick={() => this.onFileCompress()}>Compress</button>\n//                     </form>\n//                 </div>\n//                 {this.fileData()}\n//             </div>\n//         );\n//     }\n// }\n \n \n  \n\n// export default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}